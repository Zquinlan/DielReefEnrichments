<<<<<<< HEAD
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnet_class <- read_csv("~/Documents/GitHub/ecoNet/verification/data/Moorea2017_MolNetEnhancer.csv")%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv('~/Documents/GitHub/ecoNet/verification/data/ecoNetConsensus.csv')%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(true_hits, by = 'feature_number')%>%
left_join(analog_hits, by = 'feature_number')%>%
left_join(csi_finger_id, by = 'feature_number')%>%
left_join(nap_df, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnet_class, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
network <- read_tsv('~/Documents/GitHub/ecoNet/verification/dorcierr/Node_info.tsv')%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
true_hits <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/libraryMatch_05202021.csv")%>%
rename("feature_number" = '#Scan#',
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, library_superclass, library_class, library_subclass)
analog_hits <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/analogMatch_05202021.csv")%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFinger_classys <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/csiFinger_classyfire.csv')%>%
rename(smiles = SMILES)
csi_finger_id <- read_tsv("~/Documents/GitHub/ecoNet/verification/dorcierr/summary_csi_fingerid.tsv")%>%
left_join(csiFinger_classys, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfrag_classy <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/MetFragSMILES.csv')%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
unique()
NAP_classy <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/NAPSMILES.csv')%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
nap_df <- read_tsv("~/Documents/GitHub/ecoNet/verification/dorcierr/moorea2017_NAP.tsv")%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfrag_classy, by = 'MetFragSMILES')%>%
left_join(NAP_classy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
unique()
canopus <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/canopus_summary.csv')%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnet_class <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/Moorea2017_MolNetEnhancer.csv")%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/ecoNetConsensus.csv')%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(true_hits, by = 'feature_number')%>%
left_join(analog_hits, by = 'feature_number')%>%
left_join(csi_finger_id, by = 'feature_number')%>%
left_join(nap_df, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnet_class, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
network <- read_tsv('~/Documents/GitHub/ecoNet/verification/dorcierr/Node_info.tsv')%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
true_hits <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/libraryMatch_05202021.csv")%>%
rename("feature_number" = '#Scan#',
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, library_superclass, library_class, library_subclass)
analog_hits <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/analogMatch_05202021.csv")%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFinger_classys <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/csiFinger_classyfire.csv')%>%
rename(smiles = SMILES)
csi_finger_id <- read_tsv("~/Documents/GitHub/ecoNet/verification/dorcierr/summary_csi_fingerid.tsv")%>%
left_join(csiFinger_classys, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfrag_classy <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/MetFragSMILES.csv')%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
unique()
NAP_classy <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/NAPSMILES.csv')%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
nap_df <- read_tsv("~/Documents/GitHub/ecoNet/verification/dorcierr/moorea2017_NAP.tsv")%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfrag_classy, by = 'MetFragSMILES')%>%
left_join(NAP_classy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
unique()
canopus <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/canopus_summary.csv')%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnet_class <- read_csv("~/Documents/GitHub/ecoNet/verification/dorcierr/Moorea2017_MolNetEnhancer.csv")%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv('~/Documents/GitHub/ecoNet/verification/dorcierr/ecoNetConsensus.csv')%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(true_hits, by = 'feature_number')%>%
left_join(analog_hits, by = 'feature_number')%>%
left_join(csi_finger_id, by = 'feature_number')%>%
left_join(nap_df, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnet_class, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
?str
str(c(dorcPath, 'NodeInfo'))
# Reading in all data which could be gathered from respecrtive datasets
# set all locations:
dorcPath <- '~/Documents/GitHub/ecoNet/verification/dorcierr/'
str(c(dorcPath, 'NodeInfo'))
?concat
dorcPath %+% 'Node'
test <- dorcPath %+% 'Node'
test
priunt(test)
print(test)
test <- dorcPath + 'Node'
test <- c(dorcPath + 'Node')
paste(dorcPath, 'NodeInfo')
# Verification of Eco Net consesnsus scores
# Load Libraries
library(tidyverse)
select <- dplyr::select
# Reading in all data which could be gathered from respecrtive datasets
# set all locations:
dorcPath <- '~/Documents/GitHub/ecoNet/verification/dorcierr/'
# With more datasets can do for loop
network <- read_tsv(paste0(dorcPath, 'Node_info.tsv'))%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
libraryMatches <- read_csv(paste0(dorcPath, "libraryMatch.csv"))%>%
rename("feature_number" = '#Scan#',
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, library_superclass, library_class, library_subclass)
analogMatches <- read_csv(paste0(dorcPath, "analogMatch.csv"))%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFingerClassy <- read_csv(paste0(dorcPath, 'csiFinger_classyfire.csv'))%>%
rename(smiles = SMILES)
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfragClassy <- read_csv(paste0(dorcPath, 'MetFragSMILES.csv'))%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
unique()
apClassy <- read_csv(paste0(dorcPath, 'NAPSMILES.csv'))%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
napDf <- read_tsv(paste0(dorcPath, "moorea2017_NAP.tsv"))%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfragClassy, by = 'MetFragSMILES')%>%
left_join(apClassy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
unique()
canopus <- read_csv(paste0(dorcPath, 'canopus_summary.csv'))%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnetClassy <- read_csv(paste0(dorcPath, "Moorea2017_MolNetEnhancer.csv"))%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv(paste0(dorcPath, 'ecoNetConsensus.csv'))%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
napClassy <- read_csv(paste0(dorcPath, 'NAPSMILES.csv'))%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
napDf <- read_tsv(paste0(dorcPath, "moorea2017_NAP.tsv"))%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfragClassy, by = 'MetFragSMILES')%>%
left_join(napClassy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
combined <- network%>%
left_join(libraryMatches, by = 'feature_number')%>%
left_join(analogMatches, by = 'feature_number')%>%
left_join(CSIFingerID, by = 'feature_number')%>%
left_join(napDf, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnetClassy, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
select <- dplyr::select
# Reading in all data which could be gathered from respecrtive datasets
# set all locations:
dorcPath <- '~/Documents/GitHub/ecoNet/verification/dorcierr/'
# With more datasets can do for loop
network <- read_tsv(paste0(dorcPath, 'Node_info.tsv'))%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
libraryMatches <- read_csv(paste0(dorcPath, "libraryMatch.csv"))%>%
rename("feature_number" = '#Scan#',
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, library_superclass, library_class, library_subclass)
analogMatches <- read_csv(paste0(dorcPath, "analogMatch.csv"))%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFingerClassy <- read_csv(paste0(dorcPath, 'csiFinger_classyfire.csv'))%>%
rename(smiles = SMILES)
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfragClassy <- read_csv(paste0(dorcPath, 'MetFragSMILES.csv'))%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
unique()
napClassy <- read_csv(paste0(dorcPath, 'NAPSMILES.csv'))%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
napDf <- read_tsv(paste0(dorcPath, "moorea2017_NAP.tsv"))%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfragClassy, by = 'MetFragSMILES')%>%
left_join(napClassy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
unique()
canopus <- read_csv(paste0(dorcPath, 'canopus_summary.csv'))%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnetClassy <- read_csv(paste0(dorcPath, "Moorea2017_MolNetEnhancer.csv"))%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv(paste0(dorcPath, 'ecoNetConsensus.csv'))%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(libraryMatches, by = 'feature_number')%>%
left_join(analogMatches, by = 'feature_number')%>%
left_join(CSIFingerID, by = 'feature_number')%>%
left_join(napDf, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnetClassy, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
write_csv(combined, '~/Documents/GitHub/ecoNet/verification/analysis/combined_dorcierr.csv')
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfragClassy <- read_csv(paste0(dorcPath, 'MetFragSMILES.csv'))%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
unique()
combined <- network%>%
left_join(libraryMatches, by = 'feature_number')%>%
left_join(analogMatches, by = 'feature_number')%>%
left_join(CSIFingerID, by = 'feature_number')%>%
left_join(napDf, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnetClassy, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
unique()
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
analogMatches <- read_csv(paste0(dorcPath, "analogMatch.csv"))%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFingerClassy <- read_csv(paste0(dorcPath, 'csiFinger_classyfire.csv'))%>%
rename(smiles = SMILES)
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
unique()
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
select <- dplyr::select
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
unique()
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
# Verification of Eco Net consesnsus scores
# Load Libraries
library(tidyverse)
select <- dplyr::select
# Reading in all data which could be gathered from respecrtive datasets
# set all locations:
dorcPath <- '~/Documents/GitHub/ecoNet/verification/dorcierr/'
# With more datasets can do for loop
network <- read_tsv(paste0(dorcPath, 'Node_info.tsv'))%>%
select(`cluster index`, componentindex)%>%
rename(feature_number = 1,
network = 2)
libraryMatches <- read_csv(paste0(dorcPath, "libraryMatch.csv"))%>%
rename("feature_number" = '#Scan#',
library_superclass = superclass,
library_class = class,
library_subclass = subclass)%>%
select(feature_number, library_superclass, library_class, library_subclass)
analogMatches <- read_csv(paste0(dorcPath, "analogMatch.csv"))%>%
rename("feature_number" = '#Scan#',
analog_superclass = superclass,
analog_class = class,
analog_subclass = subclass)%>%
select(feature_number, analog_superclass, analog_class, analog_subclass)
csiFingerClassy <- read_csv(paste0(dorcPath, 'csiFinger_classyfire.csv'))%>%
rename(smiles = SMILES)
CSIFingerID <- read_tsv(paste0(dorcPath, "summary_csi_fingerid.tsv"))%>%
left_join(csiFingerClassy, by = 'smiles')%>%
rename(feature_number = experimentName,
csiFinger_superclass = superclass,
unique()
csiFinger_class = CF_class,
csiFinger_subclass = subclass)%>%
select(feature_number, csiFinger_superclass, csiFinger_class, csiFinger_subclass)%>%
filter(!is.na(csiFinger_superclass))%>%
unique()
metfragClassy <- read_csv(paste0(dorcPath, 'MetFragSMILES.csv'))%>%
rename(MetFragSMILES = SMILES,
metfrag_superclass = superclass,
metfrag_class = CF_class,
metfrag_subclass = subclass)%>%
select(MetFragSMILES, metfrag_superclass, metfrag_class, metfrag_subclass)%>%
napClassy <- read_csv(paste0(dorcPath, 'NAPSMILES.csv'))%>%
rename(ConsensusSMILES = SMILES,
NAP_superclass = superclass,
NAP_class = CF_class,
NAP_subclass = subclass)%>%
select(ConsensusSMILES, NAP_superclass, NAP_class, NAP_subclass)%>%
unique()
napDf <- read_tsv(paste0(dorcPath, "moorea2017_NAP.tsv"))%>%
rename("feature_number" = "cluster.index")%>%
select(feature_number, MetFragSMILES, ConsensusSMILES)%>%
left_join(metfragClassy, by = 'MetFragSMILES')%>%
left_join(napClassy, by = 'ConsensusSMILES')%>%
select(-c(MetFragSMILES, ConsensusSMILES))
unique()
canopus <- read_csv(paste0(dorcPath, 'canopus_summary.csv'))%>%
rename(feature_number = scan,
canopus_superclass = superclass,
canopus_class = class,
canopus_subclass = subclass)%>%
select(feature_number, canopus_superclass, canopus_class, canopus_subclass)%>%
unique()
molnetClassy <- read_csv(paste0(dorcPath, "Moorea2017_MolNetEnhancer.csv"))%>%
select(`cluster index`, componentindex, CF_superclass, CF_class, CF_subclass)%>%
rename(feature_number = "cluster index",
MolNet_superclass = CF_superclass,
MolNet_class = CF_class,
MolNet_subclass = CF_subclass)%>%
unique()
ecoNet <- read_csv(paste0(dorcPath, 'ecoNetConsensus.csv'))%>%
select(-c(1))%>%
rename(feature_number = scan)%>%
filter(!is.na(ecoNetConsensus))%>%
unique()
combined <- network%>%
left_join(libraryMatches, by = 'feature_number')%>%
left_join(analogMatches, by = 'feature_number')%>%
left_join(CSIFingerID, by = 'feature_number')%>%
left_join(napDf, by = 'feature_number')%>%
left_join(canopus, by = 'feature_number')%>%
left_join(molnetClassy, by = 'feature_number')%>%
left_join(ecoNet, by = c('network', 'feature_number'))
write_csv(combined, '~/Documents/GitHub/ecoNet/verification/analysis/combined_dorcierr.csv')
setwd('~/Documents/GitHub/DORCIERR/data/')
=======
add_column(trans_feature_finder = rowSums(.[3:ncol(.)] > 2E5), .before = 2)%>%
mutate(transient = case_when(trans_feature_finder >= 3 ~ "real",
TRUE ~ "transient"))%>%
dplyr::select(c(feature_number, transient))))%>%
unnest(data)%>%
spread(experiment, transient)
feature_table_no_back_trans_filter <- full_join(feature_table_no_background_trans_finder, no_background, by = "feature_number")%>%
dplyr::select(feature_number, background, everything())
# FILTERING -- out background and transient features ----------------------
dorcierr_real_features <- as.vector(feature_table_no_back_trans_filter%>%
filter(background == "real")%>%
filter(Dorcierr_transient == "real"))$feature_number
feature_table_no_back_trans <- feature_table_dirty%>%
gather(sample, val, 2:ncol(.))%>%
spread(feature_number, val)%>%
filter(sample %like any% c("D_%", "%Blank%", "%OF%"))%>%
dplyr::select(c(1, dorcierr_real_features))%>%
gather(feature_number, val, 2:ncol(.))%>%
spread(sample, val)
# FILTERING -- LOG2 bottleneck --------------------------------------------
## Everything has to double from T0 to TF (1 > log2(TF/T0) < 1)
log2_features_clean <- function(x) {
new <- x%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"))%>%
spread(Timepoint, xic)%>%
group_by(Organism, DayNight, feature_number)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
ungroup()%>%
mutate(log2_change = log2(TF/T0),
log2_change = case_when(TF > 0 & T0 == 0 ~ 6.6,
TF == 0 & T0 > 0 ~ -6.6,
TF == 0 & T0 == 0 ~ 0,
TRUE ~ as.numeric(log2_change)))%>%
filter(log2_change >= 1 | log2_change <= -1)
}
log2_features <- feature_table_no_back_trans%>%
log2_features_clean()%>%
select(-c(Organism, T0, TF))%>%
group_by(DayNight, feature_number)%>%
summarize_if(is.numeric, mean)
major_deplete_features <- feature_table_no_back_trans%>%
log2_features_clean()%>%
group_by(DayNight, feature_number, Organism)%>%
filter(min(log2_change) <= -3.3)%>%
select(-c(T0, TF, log2_change))%>%
ungroup()%>%
group_by(DayNight, feature_number)%>%
summarize_if(is.numeric, mean)
log2_change_vals <- feature_table_no_back_trans%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"))%>%
spread(Timepoint, xic)%>%
group_by(Organism, DayNight, feature_number)%>%
mutate(T0 = mean(T0, na.rm = TRUE),
log2_change = log2(TF/T0))%>%
ungroup()%>%
mutate(log2_change = case_when(TF > 0 & T0 == 0 ~ 6.6,
TF == 0 & T0 > 0 ~ -6.6,
TF == 0 & T0 == 0 ~ 0,
TRUE ~ as.numeric(log2_change)))
# FILTERING -- Log2 Exometabolites ----------------------------------------
exometabolite_features <- feature_table_no_back_trans%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"))%>%
group_by(DayNight, Timepoint, feature_number, Organism)%>%
summarize_if(is.numeric, mean)%>%
spread(Organism, xic)%>%
gather(Organism, xic, `CCA`:`Turf`)%>%
mutate(log_org = log2(xic/`Water control`))%>%
ungroup()%>%
filter(log_org > 3.3)
day_exometabolites <- exometabolite_features%>%
filter(DayNight == 'Day')%>%
select(feature_number)%>%
unique()
org_exometabolites <- exometabolite_features%>%
select(feature_number, Organism, DayNight)%>%
unique()
overlapping_exometabolites <- org_exometabolites%>%
mutate(num_organisms = 1)%>%
ungroup()%>%
select(-Organism)%>%
group_by(feature_number)%>%
summarise_if(is.numeric, sum)%>%
ungroup()%>%
group_by(num_organisms)%>%
mutate(num_features = 1)%>%
summarize_if(is.numeric, sum)
unique_benthic_metabolites <- org_exometabolites%>%
mutate(num_organisms = 1)%>%
ungroup()%>%
group_by(feature_number)%>%
mutate(num_organisms = sum(num_organisms))%>%
filter(num_organisms == 1)%>%
select(-num_organisms)
benthic_produced_exometabolites <- exometabolite_features%>%
filter(DayNight == 'Day',
Timepoint == 'T0')%>%
select(feature_number, Organism)%>%
mutate(bin = 'yes',
dorc_prd = "produced")%>%
group_by(feature_number)%>%
add_tally(name = 'num_organism')%>%
unite(Organism, c('Organism', 'dorc_prd'), sep = '_')%>%
spread(Organism, bin)%>%
mutate(dorcierr = 'yes')
benthic_produced_exometabolites[is.na(benthic_produced_exometabolites)] <- 'no'
write_csv(benthic_produced_exometabolites, './analysis/dorcierr_day_benthic_exometabolite_features.csv')
# FILTERING -- raw XIC minimum --------------------------------------------
min_filter_pre <- feature_table_no_back_trans%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"))
#Building filters and dataframes for plotting
min_filter <- min_filter_pre%>%
group_by(feature_number, Organism, DayNight, Timepoint)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
group_by(feature_number, Organism, DayNight)%>%
filter(max(xic) >= 1*10^6)%>%
left_join(networking%>%
select(network, feature_number), by = 'feature_number')
# FILTERING -- Effect of all three filters --------------------------------
min_filter_feature_tag <- min_filter%>%
ungroup()%>%
filter(DayNight == 'Day',
network %in% c('131','21','7','55','107','198','466', '165', '619', '627', '756', '924', '1314','80','141', '249','65','336','355','346'))%>%
select(feature_number, Organism)%>%
mutate(xic_min_filter = 1)
no_min_filter <- min_filter_pre%>%
left_join(networking%>%
select(network, feature_number), by = 'feature_number')
log2_filter <- min_filter_pre%>%
left_join(networking%>%
select(network, feature_number), by = 'feature_number')%>%
inner_join(log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))
all_filter <- min_filter_pre%>%
left_join(networking%>%
select(network, feature_number), by = 'feature_number')%>%
inner_join(log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))
#COunting number of features in each network
num_features_no_filter <- no_min_filter%>%
select(feature_number, network)%>%
unique()%>%
group_by(network)%>%
mutate(num_features = 1)%>%
summarize_if(is.numeric, sum)%>%
ungroup()
num_features_min_filter <- min_filter%>%
ungroup()%>%
select(feature_number, network)%>%
unique()%>%
group_by(network)%>%
mutate(num_features = 1)%>%
summarize_if(is.numeric, sum)%>%
ungroup()
num_features_log2_filter <- log2_filter%>%
ungroup()%>%
select(feature_number, network)%>%
unique()%>%
group_by(network)%>%
mutate(num_features = 1)%>%
summarize_if(is.numeric, sum)%>%
ungroup()
num_features_all_filter <- all_filter%>%
ungroup()%>%
select(feature_number, network)%>%
unique()%>%
group_by(network)%>%
mutate(num_features = 1)%>%
summarize_if(is.numeric, sum)%>%
ungroup()
num_features_incremental <- no_min_filter%>%
ungroup()%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~mutate(.x, )))
#Making the plots
plots_no_filter <- no_min_filter%>%
group_by(feature_number, Timepoint, Organism)%>%
filter(DayNight == 'Day',
network %in% c('131','21','7','55','107','198','466', '165', '619', '627', '756', '924', '1314','80','141', '249','65','336','355','346'))%>%
left_join(min_filter_feature_tag, by = c('feature_number', 'Organism'))%>%
mutate(mean = mean(xic),
sd = sd(xic),
fill_color = case_when(is.na(xic_min_filter) ~ "#F98400",
TRUE ~ "#006658"),
fill_name = case_when(is.na(xic_min_filter) ~ 'b_Noise',
TRUE ~ 'a_Real'))%>%
select(-c(xic, Replicate, xic_min_filter))%>%
unique()%>%
ungroup()%>%
left_join(num_features_no_filter, by = 'network')%>%
arrange(network)%>%
mutate(color_b = 'black',
label = 'No filters')
# group_by(network, num_features, label)%>%
# nest()%>%
# mutate(plots = map(data, ~ ggplot(.x, aes(Timepoint, mean, fill = fill_bl, color = feature_number)) +
#                      geom_bar(stat = 'identity', size = 0.0001) +
#                      facet_wrap(~Organism) +
#                      scale_fill_manual(values = c("#F2AD00", "#006658")) +
#                      ylab("Mean feature XIC") +
#                      scale_color_manual(values = .x$color_b) +
#                      ggtitle(sprintf("Net:%4.0f (%3.0f features)", network, num_features)) +
#                      theme(legend.position = 'none',
#                            plot.margin = unit(c(1,1,1.5,1.2), 'cm'),
#                            axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
#                            axis.text.y = element_text(size = 20),
#                            plot.title = element_text(size = 15, face = "bold"),
#                            panel.background = element_rect(fill = "transparent"), # bg of the panel
#                            plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#                            panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
#                            panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"))))%>%
# select(-data)%>%
# mutate(label = 'No filters')
plots_log2_filter <- log2_filter%>%
group_by(feature_number, Timepoint, Organism)%>%
filter(DayNight == 'Day',
network %in% c('131','21','7','55','107','198','466', '165', '619', '627', '756', '924', '1314','80','141', '249','65','336','355','346'))%>%
mutate(mean = mean(xic),
sd = sd(xic))%>%
select(-c(xic, Replicate))%>%
unique()%>%
ungroup()%>%
left_join(num_features_log2_filter, by = 'network')%>%
arrange(network)%>%
mutate(color_b = 'black',
fill_color = "#006658",
fill_name = "black",
label = 'Timepoint filters')
# group_by(network, num_features)%>%
# nest()%>%
# mutate(plots = map(data, ~ ggplot(.x, aes(Timepoint, mean, color = feature_number, fill = fill_bl)) +
#                      geom_bar(stat = 'identity', size= 0.0001) +
#                      facet_wrap(~Organism) +
#                      ylab("Mean feature XIC") +
#                      scale_color_manual(values = .x$color_b) +
#                      scale_fill_manual(values = .x$fill_bl) +
#                      ggtitle(sprintf("Net:%4.0f (%3.0f features)", network, num_features)) +
#                      theme(legend.position = 'none',
#                            plot.margin = unit(c(1,1,1.5,1.2), 'cm'),
#                            axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
#                            axis.text.y = element_text(size = 20),
#                            plot.title = element_text(size = 15, face = "bold"),
#                            panel.background = element_rect(fill = "transparent"), # bg of the panel
#                            plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
#                            panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
#                            panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"))))%>%
# select(-data)%>%
# mutate(label = 'Timepoint filter')
plots_all_filter <- all_filter%>%
group_by(feature_number, Timepoint, Organism)%>%
filter(DayNight == 'Day',
network %in% c('131','21','7','55','107','198','466', '165', '619', '627', '756', '924', '1314','80','141','249','65','336','355','346'))%>%
mutate(mean = mean(xic),
sd = sd(xic))%>%
select(-c(xic, Replicate))%>%
unique()%>%
ungroup()%>%
left_join(num_features_all_filter, by = 'network')%>%
arrange(network)%>%
mutate(color_b = 'black',
fill_color = "#006658",
fill_name = "black",
label = 'All filters')%>%
bind_rows(plots_no_filter, plots_log2_filter)%>%
group_by(network, Organism, Timepoint)%>%
mutate(y_max = sum(mean))%>%
ungroup()%>%
group_by(network)%>%
mutate(y_max = max(y_max))%>%
ungroup()%>%
group_by(network, num_features, label)%>%
nest()%>%
mutate(plots = map(data, ~ ggplot(.x, aes(Timepoint, mean, color = feature_number, fill = fill_name)) +
geom_bar(stat = 'identity', size= 0.0001) +
facet_wrap(~Organism) +
ylab("Mean feature XIC") +
scale_color_manual(values = .x$color_b) +
scale_fill_manual(values = c("#006658", "#F2AD00")) +
ggtitle(sprintf("Net:%4.0f (%3.0f features)", network, num_features)) +
ylim(0, min(.x$y_max)) +
theme(legend.position = 'none',
plot.margin = unit(c(1,1,1.5,1.2), 'cm'),
axis.text.x = element_text(angle = 60, hjust = 1, size = 15),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 15, face = "bold"),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"))))%>%
select(-data)
# pdf("plots/networks_xic_notfiltered.pdf", width = 15, height = 10)
# plots_no_filter$plots
# dev.off()
#
# pdf("plots/networks_xic_filtered.pdf", width = 15, height = 10)
# plots_min_filter$plots
# dev.off()
View(no_min_filter)
num_features_incremental <- no_min_filter%>%
ungroup()%>%
filter(DayNight == 'Day')%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
select(feature_number)%>%
unique()),
exometabolite = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique()),
min = map(data, ~ inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique())
)
num_features_incremental <- no_min_filter%>%
ungroup()%>%
filter(DayNight == 'Day')%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
select(feature_number)%>%
unique()),
exometabolite = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique()),
min = map(data, ~ inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique())
)%>%
select(-data)
View(num_features_incremental)
View(num_features_incremental[[1]][[1]])
num_features_incremental <- no_min_filter%>%
ungroup()%>%
filter(DayNight == 'Day')%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
select(feature_number)%>%
unique())%>%
length(),
exometabolite = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique())%>%
length(),
min = map(data, ~ inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique()%>%
length())
)%>%
select(-data)
View(num_features_incremental[[1]][[1]])
View(num_features_incremental)
?size
?length
num_features_incremental <- no_min_filter%>%
ungroup()%>%
filter(DayNight == 'Day')%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
select(feature_number)%>%
unique()%>%
nrow()),
exometabolite = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique()%>%
nrow()),
min = map(data, ~ inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number)%>%
unique()%>%
nrow())
)%>%
select(-data)
View(num_features_incremental)
num_features_incremental <- no_min_filter%>%
ungroup()%>%
filter(DayNight == 'Day')%>%
nest(data = everything())%>%
mutate(log2 = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
select(feature_number)%>%
unique()%>%
nrow()),
exometabolite = map(data, ~inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number, Organism)%>%
unique()%>%
group_by(Organism)%>%
mutate(count = 1)%>%
summarize_if(is.numeric, sum)),
min = map(data, ~ inner_join(.x, log2_features%>%
select(DayNight, feature_number), by = c('DayNight', 'feature_number'))%>%
inner_join(min_filter%>%
select(feature_number, DayNight, Organism), by = c('DayNight', 'Organism', 'feature_number'))%>%
inner_join(org_exometabolites, by = c('DayNight', 'Organism', 'feature_number'))%>%
select(feature_number, Organism)%>%
unique()%>%
group_by(Organism)%>%
mutate(count = 1)%>%
summarize_if(is.numeric, sum))
)%>%
select(-data)
View(num_features_incremental)
View(num_features_incremental[[2]][[1]])
View(num_features_incremental[[3]][[1]])
>>>>>>> 866b30c22f5339816f0bda22d3e41936737b507f
