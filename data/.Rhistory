filter(Organism != "Offshore",
Organism != "Influent")%>%
left_join(fcm_wdf%>%
rename(sample_code = sample_name)%>%
select(c(`Cells µL-1`, sample_code)), by = "sample_code")%>%
group_by(sample_code)%>%
mutate(sum = sum(reads),
ra = reads/sum,
cell_abun = ra*`Cells µL-1`,
log10 = log10(cell_abun))%>%
ungroup()%>%
group_by(OTU)%>%
mutate(abundant = case_when(max(ra) > 0.01 | sum(ra > 0.001) >=3 ~ "abundant",
TRUE ~ "rare"))
microbe_no_rare <- microbe_combined%>%
filter(abundant == "abundant")%>%
select(-abundant)
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
dplyr::select(-c(reads, sum, asin, numOtus, sample_code, `Cells µL-1`, cell_abun))%>%
spread(Organism, ra)%>%
gather(Organism, ra, 6:10)%>%
mutate(difference = ra - `Water control`)%>%
filter(difference > 0)%>%
dplyr::select(c(DayNight, OTU, Organism))
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
dplyr::select(-c(reads, sum, asin, numOtus, sample_code, `Cells µL-1`, cell_abun))
head(microbe_no_rare)
# PRE-STATS CLEANING -- Microbes and pre-filtering OTUs for abundance-----------------------------------------------
microbe_combined <- microbe_abundance_raw%>%
dplyr::select(-1)%>%
mutate(Group = case_when(Group == "Dorcierr_D_DT_1_TFD" ~ "D_DT_1_TFD",
Group == "DORCIERR_D_WA_2_TFN" ~ "D_WA_2_TFN",
Group == "D_PV_2_TFN_SA504_SC704" ~ "D_PV_2_TFN",
Group == "D_PV_2_TFN_SA503_SC704" ~ "D_PV_3_TFN",
Group == "D_WA_4_TFN_SA503_SC703" ~ "D_PL_3_TFN",
Group == "D_WA_4_TFN_SA504_SC703" ~ "D_WA_4_TFN",
TRUE ~ as.character(Group)))%>%
filter(Group %like% "%D_%")%>%
rename(sample_code = Group)%>%
gather(OTU, reads, 3:ncol(.))%>%
# left_join(., microbe_taxonomy, by = "OTU")%>%
# dplyr::select(-Size)%>%
# separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU_id"), sep = ";", remove = FALSE)%>%
separate(sample_code, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_", remove = FALSE)%>%
dplyr::mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)))%>%
dplyr::mutate(Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
Organism == "IN" ~ "Influent",
Organism == "OF" ~ "Offshore",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"))%>%
filter(Organism != "Offshore",
Organism != "Influent")%>%
left_join(fcm_wdf%>%
rename(sample_code = sample_name)%>%
select(c(`Cells µL-1`, sample_code)), by = "sample_code")%>%
group_by(sample_code)%>%
mutate(sum = sum(reads),
ra = reads/sum,
cell_abun = ra*`Cells µL-1`,
log10 = log10(cell_abun + 0.001))%>%
ungroup()%>%
group_by(OTU)%>%
mutate(abundant = case_when(max(ra) > 0.01 | sum(ra > 0.001) >=3 ~ "abundant",
TRUE ~ "rare"))
microbe_no_rare <- microbe_combined%>%
filter(abundant == "abundant")%>%
select(-abundant)
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
dplyr::select(-c(reads, sum, asin, numOtus, sample_code, `Cells µL-1`, cell_abun))
head(microbe_no_rare)
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
select(-c(reads, sum, asin, numOtus, sample_code,  cell_abun))
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
# select(-c(reads, sum, asin, numOtus, sample_code, `Cells µL-1`, cell_abun))
spread(Organism, ra)%>%
gather(Organism, ra, 6:10)%>%
mutate(difference = ra - `Water control`)%>%
filter(difference > 0)%>%
dplyr::select(c(DayNight, OTU, Organism))
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
select(-c(reads, sum, asin, numOtus, sample_code, `Cells µL-1`, cell_abun))
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
select(-c(reads, sum, log10, numOtus, sample_code, `Cells µL-1`, cell_abun))
# PRE-STATS CLEANING -- microbe RA data  --------------------------------------------
ra_bigger_TF <- microbe_no_rare%>%
select(-c(reads, sum, log10, numOtus, sample_code, `Cells µL-1`, cell_abun))%>%
spread(Organism, ra)%>%
gather(Organism, ra, 6:10)%>%
mutate(difference = ra - `Water control`)%>%
filter(difference > 0)%>%
dplyr::select(c(DayNight, OTU, Organism))
# STATS ANOVA -- Microbe TWO-Way ------------------------------------------
aov_microbe <- microbe_no_rare%>%
filter(Timepoint == "TF")%>%
group_by(OTU)%>%
nest()%>%
mutate(anova = map(data, ~ aov(log10 ~ Organism*DayNight, .x)%>%
tidy()%>%
filter(!term == "Residuals")%>%
dplyr::select(term, p.value)))%>%
dplyr::select(-data)%>%
unnest(anova)
anova_microbe_pvalues <- aov_microbe%>%
ungroup()%>%
filter(p.value < 0.05)
organism_significant_microbes <- as.vector(anova_microbe_pvalues%>%
filter(term == "Organism"))$OTU
DayNight_significant_microbes <- as.vector(anova_microbe_pvalues%>%
filter(term != "Organism"))$OTU
# PRE-POST-HOC CLEANING -- Microbe Dunnetts and DayNight anova -------------------------------
mic_organism_post_hoc <- microbe_no_rare%>%
filter(OTU %in% organism_significant_microbes)%>%
filter(Timepoint == "TF")
daynight_microbe_post_hoc <- microbe_no_rare%>%
filter(OTU %in% DayNight_significant_microbes)%>%
filter(Timepoint == "TF")
# STATS POST-HOC -- MICROBES Dunnetts -----------------------------
organism_order_micro <- as.factor(mic_organism_post_hoc$Organism)%>%
relevel("Water control")%>%
levels()%>%
as.vector()
dunnett_microbe_pvals <- mic_organism_post_hoc%>%
group_by(DayNight, OTU)%>%
mutate(sum = sum(log10))%>%
filter(sum != 0)%>%
dplyr::select(-sum)%>%
mutate(Organism = factor(Organism))%>%
mutate(Organism = fct_relevel(Organism, organism_order_micro))%>%
nest()%>%
mutate(dunnett = map(data, ~ aov(asin ~ Organism, .x)%>%
glht(linfct = mcp(Organism = "Dunnett"))),
dunnett_summary = map(dunnett, ~summary(.x)%>%
tidy()))%>%
dplyr::select(-c(data,dunnett))%>%
unnest(dunnett_summary)%>%
dplyr::select(-c(4:7))%>%
mutate(lhs = gsub(" - Water control", "", lhs))%>%
rename("Organism" = "lhs")%>%
ungroup()%>%
add_column(FDR = p.adjust(.$p.value, method = "BH"))%>%
filter(FDR < 0.05)
dunnett_microbe_pvals <- mic_organism_post_hoc%>%
group_by(DayNight, OTU)%>%
mutate(sum = sum(log10))%>%
filter(sum != 0)%>%
dplyr::select(-sum)%>%
mutate(Organism = factor(Organism))%>%
mutate(Organism = fct_relevel(Organism, organism_order_micro))%>%
nest()%>%
mutate(dunnett = map(data, ~ aov(log10 ~ Organism, .x)%>%
glht(linfct = mcp(Organism = "Dunnett"))),
dunnett_summary = map(dunnett, ~summary(.x)%>%
tidy()))%>%
dplyr::select(-c(data,dunnett))%>%
unnest(dunnett_summary)%>%
dplyr::select(-c(4:7))%>%
mutate(lhs = gsub(" - Water control", "", lhs))%>%
rename("Organism" = "lhs")%>%
ungroup()%>%
add_column(FDR = p.adjust(.$p.value, method = "BH"))%>%
filter(FDR < 0.05)
warnings()
head(dunnett_microbe_pvals)
# STATS POST-HOC -- DayNight MICROBES t-test organism --------------------
daynight_microbe_pvals <- mic_organism_post_hoc%>%
group_by(Organism, OTU)%>%
mutate(sum = sum(log10))%>%
filter(sum != 0)%>%
dplyr::select(-sum)%>%
nest()%>%
mutate(data = map(data, ~ aov(log10 ~ DayNight, .x)%>%
tidy()))%>%
unnest(data)%>%
dplyr::select(-c(4:7))%>%
filter(term != "Residuals")%>%
ungroup()%>%
add_column(FDR = p.adjust(.$p.value, method = "BH"))%>%
filter(FDR < 0.05)
dunnett_micro_analysis <- dunnett_microbe_pvals%>%
dplyr::select(-p.value)%>%
spread(Organism, FDR)%>%
add_column(number_exudate_organisms = rowSums(.[3:ncol(.)] >= 0, na.rm = TRUE))%>%
mutate(microbe_organism = case_when(is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "CCA",
is.na(CCA)  &
is.na(Dictyota) == FALSE &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Dictyota",
is.na(CCA)  &
is.na(Dictyota) &
is.na(Turf) == FALSE &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Turf",
is.na(CCA) &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`) == FALSE &
is.na(`Porites lobata`) ~ "Pocillopora verrucosa",
is.na(CCA) &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) == FALSE ~ "Porites lobata",
is.na(`Pocillopora verrucosa`) == FALSE &
is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf)  |
is.na(`Porites lobata`) == FALSE &
is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf) ~ "Corraline",
is.na(`Pocillopora verrucosa`) &
is.na(CCA) == FALSE &
is.na(Dictyota) == FALSE &
is.na(`Porites lobata`) |
is.na(CCA) == FALSE &
is.na(Turf) == FALSE &
is.na(`Porites lobata`) &
is.na(`Pocillopora verrucosa`) ~ "Algae",
is.na(`Dictyota`) &
is.na(CCA)  &
is.na(Turf) &
is.na(`Porites lobata`) == FALSE &
is.na(`Pocillopora verrucosa`) == FALSE ~ "Coral",
is.na(`Dictyota`) == FALSE &
is.na(CCA)  &
is.na(Turf) == FALSE &
is.na(`Porites lobata`) &
is.na(`Pocillopora verrucosa`) ~ "Fleshy Algae",
is.na(CCA)  &
is.na(Dictyota) &
is.na(Turf) == FALSE &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Turf",
number_exudate_organisms > 3 ~ "Primary Producers",
TRUE ~ "Cosmo"))
micro_sigs_vector <- as.vector(dunnett_micro_analysis$OTU)
# META-STATS Random Forest -- microbes ------------------------------------------
rf_microbe_prep <- microbe_no_rare%>%
filter(Timepoint == "TF")%>%
select(c(1:6, OTU, log10))%>%
filter(OTU %in% micro_sigs_vector)%>%
# group_by(Organism, Replicate, Timepoint, DayNight, OTU)%>%
# summarize_if(is.numeric, sum)%>%
# ungroup()%>%
spread(OTU, log10)%>%
select(Organism, DayNight, 7:ncol(.))%>%
mutate(Organism = as.factor(Organism))
names(rf_microbe_prep) <- make.names(names(rf_microbe_prep))
rf_microbe <- rf_microbe_prep%>%
group_by(DayNight)%>%
nest()%>%
mutate(data = map(data, ~randomForest(Organism ~ ., .x,
importance = TRUE, proximity = TRUE,
ntree = 5000, na.action=na.exclude)),
mda = map(data, ~ .x$importance%>%
as.data.frame()%>%
rownames_to_column("otu")))
rf_microbe_mda <- rf_microbe%>%
select(DayNight, mda)%>%
unnest(mda)
View(rf_microbe)
pdf("~/Documents/GitHub/DORCIERR/data/plots/microbe_mda.pdf", width = 7, height = 5)
rf_microbe_mda%>%
filter(DayNight == "Day")%>%
ggplot(., aes(x= reorder(otu, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Day") +
geom_hline(yintercept = (top_n(rf_microbe_mda%>%
filter(DayNight=="Day"), 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
scale_x_discrete(breaks = seq(0, 568, 50))
rf_microbe_mda%>%
filter(DayNight == "Night")%>%
ggplot(., aes(x= reorder(otu, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Night") +
geom_hline(yintercept = (top_n(rf_microbe_mda%>%
filter(DayNight=="Night"), 35, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
scale_x_discrete(breaks = seq(0, 568, 50))
dev.off()
rf_microbe_mda%>%
filter(DayNight == "Day")%>%
ggplot(., aes(x= reorder(otu, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Day") +
geom_hline(yintercept = (top_n(rf_microbe_mda%>%
filter(DayNight=="Day"), 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
scale_x_discrete(breaks = seq(0, 568, 50))
rf_microbe_mda%>%
filter(DayNight == "Night")%>%
ggplot(., aes(x= reorder(otu, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Night") +
geom_hline(yintercept = (top_n(rf_microbe_mda%>%
filter(DayNight=="Night"), 35, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
scale_x_discrete(breaks = seq(0, 568, 50))
rf_microbe_sigs <- (rf_microbe_mda%>%
group_by(DayNight)%>%
nest()%>%
mutate(dic = map(data, ~ top_n(.x, 20, Dictyota)%>%
select(otu)),
cca = map(data, ~ top_n(.x, 20, CCA)%>%
select(otu)),
trf = map(data, ~ top_n(.x, 20, Turf)%>%
select(otu)),
poc = map(data, ~ top_n(.x, 20, `Pocillopora verrucosa`)%>%
select(otu)),
por = map(data, ~ top_n(.x, 20, `Porites lobata`)%>%
select(otu)),
wat = map(data, ~ top_n(.x, 20, `Water control`)%>%
select(otu)))%>%
select(-data)%>%
gather(species, importance, dic:wat)%>%
unnest(importance))$otu%>%
as.vector()%>%
unique()
# META-STATS -- Hierarchical cluster matrix----------------------------------------
hc_microbe <- mic_organism_post_hoc%>%
filter(OTU %in% rf_microbe_sigs)%>%
ungroup()%>%
group_by(OTU)%>%
mutate(zscore = zscore(asin))%>%
ungroup()%>%
dplyr::select(c(Organism, DayNight, Replicate, OTU, zscore))%>%
unite(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
left_join(microbe_taxonomy, by = "OTU")%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU_id"), sep = ";")%>%
unite(OFGO, c("Order", "Family", "Genus", "OTU"), sep = ";")%>%
select(-c(Size, OTU_id, Kingdom, Phylum, Class))%>%
spread(OFGO, zscore)
# META-STATS -- Hierarchical cluster matrix----------------------------------------
hc_microbe <- mic_organism_post_hoc%>%
filter(OTU %in% rf_microbe_sigs)%>%
ungroup()%>%
group_by(OTU)%>%
mutate(zscore = zscore(log0))%>%
ungroup()%>%
dplyr::select(c(Organism, DayNight, Replicate, OTU, zscore))%>%
unite(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
left_join(microbe_taxonomy, by = "OTU")%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU_id"), sep = ";")%>%
unite(OFGO, c("Order", "Family", "Genus", "OTU"), sep = ";")%>%
select(-c(Size, OTU_id, Kingdom, Phylum, Class))%>%
spread(OFGO, zscore)
# META-STATS -- Hierarchical cluster matrix----------------------------------------
hc_microbe <- mic_organism_post_hoc%>%
filter(OTU %in% rf_microbe_sigs)%>%
ungroup()%>%
group_by(OTU)%>%
mutate(zscore = zscore(log10))%>%
ungroup()%>%
dplyr::select(c(Organism, DayNight, Replicate, OTU, zscore))%>%
unite(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
left_join(microbe_taxonomy, by = "OTU")%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU_id"), sep = ";")%>%
unite(OFGO, c("Order", "Family", "Genus", "OTU"), sep = ";")%>%
select(-c(Size, OTU_id, Kingdom, Phylum, Class))%>%
spread(OFGO, zscore)
View(hc_microbe)
write_csv(hc_microbe%>%
select(everything(), sample), "~/Documents/GitHub/DORCIERR/data/plots/microbe_hc_df.csv")
# META-STATS -- Hierarchical cluster matrix----------------------------------------
hc_microbe <- mic_organism_post_hoc%>%
# filter(OTU %in% rf_microbe_sigs)%>%
ungroup()%>%
group_by(OTU)%>%
mutate(zscore = zscore(log10))%>%
ungroup()%>%
dplyr::select(c(Organism, DayNight, Replicate, OTU, zscore))%>%
unite(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
left_join(microbe_taxonomy, by = "OTU")%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU_id"), sep = ";")%>%
unite(OFGO, c("Order", "Family", "Genus", "OTU"), sep = ";")%>%
select(-c(Size, OTU_id, Kingdom, Phylum, Class))%>%
spread(OFGO, zscore)
write_csv(hc_microbe%>%
select(everything(), sample), "~/Documents/GitHub/DORCIERR/data/plots/microbe_hc_df.csv")
View(summary_ttest)
View(t_test_features)
metadata$ZodiacMF
networking <- metadata%>%
dplyr::select(c(feature_number, network,combined_ID, binary_ID,
canopus_annotation:CLASS_STRING, ZodiacMF, `characterization scores`,
C:dG, inchi_binary, inchi_combined))%>%
separate(CLASS_STRING, c("level 1", "level 2", "level 3",
"level 4", "level 5", "level 6", "level 7", "level 8"), sep = ";")%>%
mutate(c_temp = case_when(C > 0 ~ "C",
TRUE ~ "_"),
o_temp = case_when(O > 0 ~ "O",
TRUE ~ "_"),
h_temp = case_when(H > 0 ~ "H",
TRUE~ "_"),
n_temp = case_when(N > 0 ~ "N",
TRUE ~ "_"),
p_temp = case_when(P > 0 ~ "P",
TRUE ~ "_"),
s_temp = case_when(S > 0 ~ "S",
TRUE ~ "_"))%>%
unite(simplified_makeup, c("c_temp", "h_temp", "o_temp", "n_temp", "p_temp", "s_temp"), sep = "")%>%
mutate(simplified_makeup = gsub("_","", simplified_makeup),
simplified_makeup = case_when(`characterization scores` != "Good" ~ "uncharacterized",
simplified_makeup == "" ~ "uncharacterized",
TRUE ~ as.character(simplified_makeup)))%>%
left_join(inchikey_df, by = "feature_number", suffix = c("", "_inchi"))
t_test_features <- t_pvals%>%
left_join(networking, by = "feature_number")
View(t_test_features)
t_test_features <- t_pvals%>%
left_join(networking, by = "feature_number")$feature_number%>%
unique()
t_test_features <- (t_pvals%>%
left_join(networking, by = "feature_number")%>%$feature_number%>%
t_test_features <- (t_pvals%>%
left_join(networking, by = "feature_number"))$feature_number%>% as.vector()%>% unique()
t_test_features <- (t_pvals%>%
left_join(networking, by = "feature_number")%>% filter(activity != "recalictrant"))$feature_number%>% as.vector()%>% unique()
t_test_features <- (t_pvals%>%
left_join(networking, by = "feature_number")%>% filter(activity != "recalcitrant"))$feature_number%>% as.vector()%>% unique()
t_test_features <- (t_pvals%>%
left_join(networking, by = "feature_number")%>% filter(activity != "recalcitrant")%>% filter(`characterization scores` == "Good"))$feature_number%>% as.vector()%>% unique()
View(t_test_features)
t_test_features <- t_pvals%>%
left_join(networking, by = "feature_number")
View(t_test_features)
tt_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = .$N/.$P, col = activity)) +
facet_wrap(~DayNight) +
geom_boxplot()
t_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = .$N/.$P, col = activity)) +
facet_wrap(~DayNight) +
geom_boxplot()
t_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = log10(.$N/.$P), col = activity)) +
facet_wrap(~DayNight) +
geom_boxplot()
t_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = log10(.$N/.$P), col = activity)) +
facet_wrap(~DayNight) +
geom_point()
t_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = log10(.$N/.$P), col = activity)) +
facet_wrap(~DayNight) +
geom_point(stat = summary, fun.y = mean)
t_test_features%>%
filter(`characterization scores` == "Good")%>%
ggplot(aes(Organism, y = log10(.$N/.$P), col = activity)) +
facet_wrap(~DayNight) +
geom_point(stat = "summary", fun.y = mean)
write_csv(t_test_features, "~/Documents/GitHub/DORCIERR/data/analysis/t_test_features.csv")
