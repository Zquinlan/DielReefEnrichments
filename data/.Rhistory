# GRAPHING -- data sleuthing Porites --------------------------------------
porites_depletes <- osm_dunnetts%>%
filter(Organism == "Porites lobata")
porites_asv <- osm_otus%>%
# filter(log2_change >= 1,
#        TF >= 0.001)%>%
select(Tax_plot, OTU)%>%
distinct(Tax_plot, OTU)%>%
left_join(microbe_no_rare, by = c("OTU"))%>%
filter(DayNight == "Day",
Organism == "Porites lobata")
# PLOT FOR CRAIG ----------------------------------------------------------
osm_correlation%>%
filter(feature_number == "2734",
OTU == "Otu0062")%>%
ggplot(aes(log10, log2_change, col = Organism)) +
geom_point()
pdf("./plots/cyromorphaceae.pdf", height = 7, width = 8)
osm_otus%>%
filter(OTU == "Otu0062")%>%
select(-log2_change)%>%
gather(Timepoint, val, T0:TF)%>%
ggplot(aes(Timepoint, val, fill == "gray")) +
geom_bar(stat = "summary", fun.y = "mean") +
# scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2")) + # Colorblind pallette
facet_wrap(~Organism) +
# coord_flip() +
theme(
# legend.position = "none",
# plot.margin = margin(2,.8,2,.8, "cm"),
axis.text.x = element_text(angle = 60, size = 20,  hjust = 1),
axis.text.y = element_text(size = 20),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")
)
dev.off()
# GRAPHING -- [OSM] FCM data ----------------------------------------------------
fcm_graphing <- fcm_wdf%>%
filter(!Organism == 'Influent',
!Organism == 'Offshore',
DayNight == "Day")%>%
mutate(Hours = case_when(Timepoint == "T0" ~ 0,
Timepoint == "T1" ~ 4,
Timepoint == "T2" ~ 13,
Timepoint == "T3" ~ 17,
Timepoint == "T4" ~ 23,
Timepoint == "T5" ~ 28,
Timepoint == "T6" ~ 37,
Timepoint == "TF" ~ 48))
pdf("~/Documents/GitHub/DORCIERR/data/plots/osm_fcm_DayNight.pdf", width = 7, height = 5)
fcm_graphing%>%
ggplot(aes(x= Hours, y = `Cells µL-1`, color = Organism))+
geom_point(stat = "summary", fun.y = "mean") +
geom_line(aes(group = Organism), stat = "summary", fun.y = "mean") +
facet_wrap(~ DayNight) +
# scale_color_manual(values = c("darkorchid3", "#50A45C", "#AF814B", "#5BBCD6")) +
scale_y_continuous(limits = c(0,900), breaks= seq(0, 900, 100)) +
scale_x_continuous(limits = c(0,50), breaks = seq(0, 50, 5)) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.x = element_blank(), # get rid of major grid
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
dev.off()
# GRAPHING -- [OSM] PCoAs Labile ------------------------------------------
osm_dom_pco <- dom_stats_wdf%>%
spread(Timepoint, log)%>%
filter(DayNight == "Day")%>%
group_by(feature_number, Organism, DayNight)%>%
mutate(mean_t0 = mean(T0, na.rm = TRUE))%>%
mutate(change = TF - mean_t0)%>%
ungroup()%>%
mutate(zscore = ((change - mean(change, na.rm = TRUE))/sd(change, na.rm = TRUE)))%>%
mutate(zscore = zscore + 78)%>%
select(-c(TF, T0, mean_t0, change))%>%
unite(sample, c(1:4), sep = "_")%>%
spread(2,3)%>%
column_to_rownames(var = "sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
## Plot Eigenvalues
osm_dom_pco$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## PCoA plot
pdf("./plots/osm_dom_pcoa.pdf", width = 6, height = 5)
osm_dom_pco$vectors%>%
as.data.frame()%>%
rownames_to_column(var = "sample")%>%
separate(sample, c("experiemnt", "Organism", "replicate", "DayNight"), sep = "_")%>%
ggplot(., aes(x = Axis.1, y = Axis.2, color = Organism, shape = DayNight)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_shape_manual(values = c(19)) +
# scale_color_manual(values = c("darkorchid3", "#50A45C", "#AF814B", "#5BBCD6")) +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
xlab(str_c("Axis 1", " (", round(osm_dom_pco$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ylab(str_c("Axis 2", " (", round(osm_dom_pco$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
ggtitle("Labile features")
dev.off()
# GRAPHING -- [OSM] PCoAs microbes ------------------------------------------
osm_pcoa_microbe <- microbe_no_rare%>%
filter(DayNight == "Day")%>%
unite(sample, c(Organism, DayNight, Replicate), sep = "_")%>%
select(-c(Experiment, T0, TF))%>%
group_by(sample, OTU)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
mutate(log2_change = log2_change + 19)%>%
spread(OTU, log2_change)%>%
column_to_rownames("sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
## Plot Eigenvalues
osm_pcoa_microbe$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## PCoA plot
pdf("./plots/osm_microbes_pcoa.pdf", width = 6, height = 5)
osm_pcoa_microbe$vectors%>%
as.data.frame()%>%
rownames_to_column(var = "sample")%>%
separate(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
ggplot(., aes(x = Axis.1, y = Axis.2, color = Organism, shape = DayNight)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_shape_manual(values = c(19)) +
# scale_color_manual(values = c("darkorchid3", "#50A45C", "#AF814B", "#5BBCD6")) +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
xlab(str_c("Axis 1", " (", round(osm_pcoa_microbe$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ylab(str_c("Axis 2", " (", round(osm_pcoa_microbe$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
ggtitle("microbial communities")
dev.off()
# GRAPHING —- PCoAs DOM --------------------------------------
#looking at exudate features
dom_pco <- dom_stats_wdf%>%
spread(Timepoint, log)%>%
group_by(feature_number, Organism, DayNight)%>%
mutate(mean_t0 = mean(T0, na.rm = TRUE))%>%
mutate(change = TF - mean_t0)%>%
ungroup()%>%
mutate(zscore = ((change - mean(change, na.rm = TRUE))/sd(change, na.rm = TRUE)))%>%
mutate(zscore = zscore + 78)%>%
select(-c(TF, T0, mean_t0, change))
dom_graphing <- dom_pco%>%
spread(5,6)
dorc_all_pcoa <- dom_pco%>%
unite(sample, c(1:4), sep = "_")%>%
spread(2,3)%>%
column_to_rownames(var = "sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
#This plots Eigenvalues
dorc_all_pcoa$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
# S3 method for pcoa
pco_scores_all <- dorc_all_pcoa$vectors%>%
as.data.frame()%>%
rownames_to_column(var = "sample")%>%
mutate(feature = "all")%>%
separate(sample, c("experiemnt", "Organism", "replicate", "DayNight"), sep = "_")
# Dorc_all_labile_exudates plot
pdf("./plots/dom_pcoa.pdf", width = 6, height = 5)
dorc_all_pcoa$vectors%>%
as.data.frame()%>%
rownames_to_column(var = "sample")%>%
separate(sample, c("experiemnt", "Organism", "replicate", "DayNight"), sep = "_")%>%
ggplot(., aes(x = Axis.1, y = Axis.2, color = Organism, shape = DayNight)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_shape_manual(values = c(1,19)) +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
xlab(str_c("Axis 1", " (", round(dorc_all_pcoa$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ylab(str_c("Axis 2", " (", round(dorc_all_pcoa$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
ggtitle("All DOM features")
dev.off()
# GRAPHING -- PCoA's Microbes ---------------------------------------------
pcoa_microbe <- microbe_no_rare%>%
# filter(OTU %in% micro_sigs_vector)%>%
filter(Timepoint == "TF")%>%
unite(sample, c(Organism, DayNight, Replicate), sep = "_")%>%
select(-c(sample_code, Experiment, Timepoint,
numOtus, sum, reads, ra))%>%
group_by(sample, OTU)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
mutate(zscore = (log10 -mean(log10))/sd(log10))%>%
mutate(zscore = zscore + 0.75)%>%
select(-c(log10, `Cells µL-1`, cell_abun))%>%
spread(OTU, zscore)%>%
column_to_rownames("sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_microbe$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
pdf("~/Documents/GitHub/DORCIERR/data/plots/microbe_pcoa.pdf", width = 6, height = 5)
pcoa_microbe$vectors%>%
as.data.frame()%>%
rownames_to_column("sample")%>%
separate(sample, c("Organism", "DayNight", "Replicate"), sep = "_")%>%
ggplot(., aes(x = Axis.1, y = Axis.2, color = Organism, shape = DayNight)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_shape_manual(values = c(1,19)) +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major.y = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of major grid
panel.grid.major.x = element_line(size = 0.2, linetype = 'solid',colour = "gray"), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
legend.text = element_text(face = "italic")) +
xlab(str_c("Axis 1", " (", round(pcoa_microbe$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ylab(str_c("Axis 2", " (", round(pcoa_microbe$values$Relative_eig[2], digits = 4)*100, "%)", sep = ""))
dev.off()
# SUMMARY -- DOM-----------------------------------------------------------------
summary_no_background <- as.vector(feature_table_no_back_trans_filter%>%
filter(background == "real"))$feature_number%>%
length()
summary_no_back_trans <- as.vector(feature_table_no_back_trans_filter%>%
filter(background == "real")%>%
filter(Dorcierr_transient == "real"))$feature_number%>%
length()
summary_log2 <-log2_features%>%
group_by(DayNight)%>%
nest()%>%
mutate(log2_change = map(data, ~ length(.x$feature_number)))%>%
select(-data)
summary_ttest <- t_pvals%>%
mutate(count = 1)%>%
select(c(Organism, DayNight, activity, count))%>%
group_by(Organism, DayNight, activity)%>%
summarize_if(is.numeric, sum)%>%
spread(DayNight, count)
summary_ttest_meta <- compound_prevalance%>%
mutate(data = map(data, ~ mutate(.x, count = 1)%>%
select(count)%>%
summarize_if(is.numeric, sum, na.rm = TRUE)))%>%
unnest(data)
summary_average_xic <- feature_table_no_back_trans%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"),
xic = case_when(xic == 0 ~ 1000,
TRUE ~ as.numeric(xic)))%>%
# filter(Timepoint == "T0")%>%
# select(-Timepoint)%>%
spread(Timepoint, xic)%>%
group_by(Organism, DayNight, feature_number)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
mutate(log2_change = log2(TF/T0))%>%
ungroup()%>%
select(-c(T0, TF))%>%
spread(Organism, log2_change)%>%
right_join(t_pvals, by = c("DayNight", "feature_number"))
summary_dunnett <- dunnetts_dom%>%
right_join(dom_stats_wdf%>%
select(c(feature_number, Timepoint, DayNight, Organism, log))%>%
group_by(feature_number,Timepoint, DayNight, Organism)%>%
summarize_if(is.numeric, mean, na.rm = TRUE), by = c("feature_number", "DayNight", "Organism"))%>%
left_join(networking, by = "feature_number")%>%
select(-p.value)
summary_count_dunnett <- dunnetts_dom%>%
select(activity, Organism, DayNight)%>%
group_by(activity, Organism, DayNight)%>%
mutate(count = 1)%>%
summarize_if(is.numeric, sum)
# summary_ttest <- t_pvals%>%
#   mutate(depletolites = map(data, ~ filter(.x, activity == "depletolites")$feature_number%>%
#                               length()),
#          accumlites = map(data, ~ filter(.x, activity == "accumulites")$feature_number%>%
#                             length()),
#          recalcitrant = map(data, ~ filter(.x, activity == "recalcitrant")$feature_number%>%
#                               length()))%>%
#   select(-data)
#
# summary_anova <- anova_dom_t0%>%
#   select(-c(feature_number, term, p.value, FDR))%>%
#   mutate(anova_groups_summary = 1)%>%
#   group_by(DayNight, activity, anova)%>%
#   summarize_if(is.numeric, sum)
write_csv(t_test_features%>%
filter(`characterization scores` == "Good"), "~/Documents/GitHub/DORCIERR/data/analysis/t_test_features.csv")
write_csv(summary_dunnett%>%
unite(sample, c(Organism, DayNight, Timepoint), sep = "_")%>%
spread(sample, log), "~/Documents/GitHub/DORCIERR/data/analysis/cytoscape_dunnetts.csv")
#plotting
## Download country data
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
library(tidyverse)
library(readxl)
library(httr)
library(wesanderson)
library(scales)
#plotting
## Download country data
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#plotting
## Download country data
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
## read in dfs
countries_raw <-read_csv(tf)%>%
rename(date = dateRep,
country = countriesAndTerritories,
`Cases per day` = `cases`,
Deaths = deaths)%>%
group_by(country)%>%
arrange(date)%>%
mutate(`Total Confirmed Cases` = cumsum(`Cases per day`),
)%>%
ungroup()
View(countries_raw%>% filter(country %like% cur))
View(countries_raw%>% filter(country %like% "Cur%"))
rsconnect::deployApp('~/Documents/GitHub/covid/')
View(countries_raw%>% filter(country %like% "Cur%"))
rsconnect::deployApp('~/Documents/GitHub/covid/')
## read in dfs
countries_raw <-read_csv(tf)%>%
rename(date = dateRep,
country = countriesAndTerritories,
`Cases per day` = `cases`,
Deaths = deaths)%>%
group_by(country)%>%
arrange(date)%>%
mutate(date = as.Date(date, "%d/%m/%y"),
`Total Confirmed Cases` = cumsum(`Cases per day`),
)%>%
ungroup()
View(countries_raw)
View(countries_raw%>% filter(country %like% "Cur%"))
shiny::runApp('~/Documents/GitHub/covid')
## read in dfs
countries_raw <-read_csv(tf)%>%
rename(date = dateRep,
country = countriesAndTerritories,
`Cases per day` = `cases`,
Deaths = deaths)%>%
mutate(date = as.Date(date, "%d/%m/%y"))%>%
group_by(country)%>%
arrange(date)%>%
mutate(`Total Confirmed Cases` = cumsum(`Cases per day`))%>%
ungroup()
## read in dfs
countries_raw <-read_csv(tf)%>%
rename(date = dateRep,
country = countriesAndTerritories,
`Cases per day` = `cases`,
Deaths = deaths)%>%
mutate(date = as.Date(date, "%d/%m/%y"))%>%
group_by(country)%>%
arrange(date)%>%
mutate(`Total Confirmed Cases` = cumsum(`Cases per day`))%>%
ungroup()
View(countries_raw%>% filter(country %like% "Cur%"))
View(countries_raw%>% filter(country %like% "Cur%"))
runApp('~/Documents/GitHub/covid')
rsconnect::deployApp('~/Documents/GitHub/covid/')
View(major_depletolites)
osm_dunnetts <- dunnetts_dom%>%
filter(feature_number %in% osm_dunnett_features)%>%
left_join(feature_table_no_back_trans%>%
gather(sample_name, xic, 2:ncol(.))%>%
ungroup()%>%
separate(sample_name, c("Experiment", "Organism", "Replicate", "Timepoint"), sep = "_")%>%
filter(!Experiment %like% "%Blank%",
!Organism %like% "%Blank")%>%
mutate(Experiment = case_when(Experiment == "D" ~ "dorcierr",
Experiment == "M" ~ "mordor",
Experiment == "R" ~ "RR3",
TRUE ~ as.character(Experiment)),
Organism = case_when(Organism == "CC" ~ "CCA",
Organism == "DT" ~ "Dictyota",
Organism == "PL" ~ "Porites lobata",
Organism == "PV" ~ "Pocillopora verrucosa",
Organism == "TR" ~ "Turf",
Organism == "WA" ~ "Water control",
TRUE ~ as.character(Organism)))%>%
separate(Timepoint, c("Timepoint", "DayNight"), sep = 2)%>%
mutate(DayNight = case_when(DayNight == "D" ~ "Day",
TRUE ~ "Night"),
xic = case_when(xic == 0 ~ 1000,
TRUE ~ as.numeric(xic)))%>%
group_by(Organism, Timepoint, DayNight, feature_number)%>%
mutate(Replicate = as.numeric(Replicate),
xic = case_when(sum(xic) == 4000 ~ xic + Replicate,
sum(xic) == 2000 ~ xic + Replicate,
TRUE ~ as.numeric(xic)))%>%
ungroup()%>%
spread(Timepoint, xic)%>%
group_by(Organism, DayNight, feature_number)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
mutate(log2_change = log2(TF/T0))%>%
ungroup(), by = c("DayNight", "feature_number", "Organism"))%>%
mutate(log2_change = as.numeric(as.character(log2_change)))%>%
filter(log2_change <= -3.3)%>%
left_join(molnet_class, by = c("feature_number"))%>%
separate(molnet_string, c("CF_kingdom", "CF_superclass", "CF_class", "CF_subclass"), sep = ";")%>%
gather(Timepoint, xic, T0:TF)
View(osm_dunnetts)
osm_dunnetts%>%
filter(`level 2` != "NA",
`level 5` != "NA",
# `level 2` %like% "Lipids%" & !FinalClass %like% "%carnitine%"
# `level 2` %like% "Organohetero%"
# FinalClass %like% "%carnitine%"
`level 2` %like% "Organic acids%"
)%>%
rename(`Chemical Class` = `level 3`)%>%
mutate(`Chemical Class` = case_when(`Chemical Class` %like% "%Carb%" ~ `level 5`,
TRUE ~ as.character(`Chemical Class`)))%>%
# unite(compound, c("level 3", "FinalClass"), sep = " ")%>%
ggplot(aes(Timepoint, xic, fill = `Chemical Class`)) +
geom_bar(stat = "identity", position = "stack") +
# scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "darkorchid3")) + # Colorblind pallette
facet_wrap(~Organism) +
# coord_flip() +
theme(
# legend.position = "none",
# plot.margin = margin(2,.8,2,.8, "cm"),
axis.text.x = element_text(angle = 60, size = 20, hjust = 1),
axis.text.y = element_text(size = 20),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")
)
runApp('~/Documents/GitHub/covid')
runApp('~/Documents/GitHub/covid')
#Reading in and cleaning dataframes
counties_raw <- read_csv(url(county_url))%>%
select(-fips)%>%
rename(`Deaths per day` = Deaths)%>%
mutate(date = as.Date(date))%>%
group_by(state, county)%>%
arrange(date)%>%
mutate(`Cases per day` = cases - lag(cases, default = first(date)),
`Cases per day` = case_when(`Cases per day` < 0 ~ 0,
TRUE ~ as.numeric(`Cases per day`)))%>%
rename(`Total Confirmed Cases` = cases,
Deaths = deaths)%>%
ungroup()%>%
left_join(county_census, by = c("state", "county"))%>%
select(date, state, county, input$data_type_state, population)%>%
rename(plot = 4)%>%
mutate(plot = case_when(input$pop_divider_state == "Not relativized" ~ plot,
input$pop_divider_state == "Percent of Population" ~ plot/population*100,
input$pop_divider_state == "Cases per 100,000 people" ~ plot/population*100000))
runApp('~/Documents/GitHub/covid')
rsconnect::deployApp('~/Documents/GitHub/covid/')
?first
